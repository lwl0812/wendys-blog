(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{740:function(t,a,s){"use strict";s.r(a);var n=s(1),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据结构","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),s("h2",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),s("ul",[s("li",[t._v("有下标")]),t._v(" "),s("li",[t._v("顺序存储")])]),t._v(" "),s("h3",{attrs:{id:"数组的基本操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组的基本操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 数组的基本操作")]),t._v(" "),s("p",[t._v("1、读取元素")]),t._v(" "),s("p",[t._v("通过下标读取")]),t._v(" "),s("p",[t._v("2、更新元素")]),t._v(" "),s("p",[t._v("通过下标赋值")]),t._v(" "),s("p",[t._v("3、插入元素")]),t._v(" "),s("ul",[s("li",[t._v("尾部插入")]),t._v(" "),s("li",[t._v("中间插入")]),t._v(" "),s("li",[t._v("超范围插入")])]),t._v(" "),s("p",[t._v("中间插入需将插入位置后面的元素往后移动，把要插入的元素放到插入位置。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" element"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'超出数组实际元素范围'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从右向左循环，将元素逐个移动")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" element"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [1, 2, 1, 3, 4, 5]")]),t._v("\n")])])]),s("p",[t._v("超范围插入，需要将数组扩容--将数组扩充到原来的2倍，然后将原来的元素复制过去。")]),t._v(" "),s("p",[t._v("4、删除元素")]),t._v(" "),s("p",[t._v("如果删除元素位于数组中间，需要将后面的元素向前移动。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("del")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("error")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'超出数组实际元素范围'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("del")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [1, 2, 4, 5]")]),t._v("\n")])])]),s("h3",{attrs:{id:"数组的优势劣势"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组的优势劣势","aria-hidden":"true"}},[t._v("#")]),t._v(" 数组的优势劣势")]),t._v(" "),s("p",[t._v("优势：高效的随机访问能力")]),t._v(" "),s("p",[t._v("劣势：插入、删除元素会导致大量元素移动位置，影响效率。")]),t._v(" "),s("h2",{attrs:{id:"链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表","aria-hidden":"true"}},[t._v("#")]),t._v(" 链表")]),t._v(" "),s("p",[t._v("链表（linked list）是一种在物理上非连续、非顺序的数据结构，由若干节点所组成。")]),t._v(" "),s("h3",{attrs:{id:"单向链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单向链表","aria-hidden":"true"}},[t._v("#")]),t._v(" 单向链表")]),t._v(" "),s("p",[t._v("单向链表的每个节点有两个部分组成：1、存放数据的变量data；2、指向下一个节点的指针 next。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.ax1x.com/2019/08/21/mNuIWn.png",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"双向链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双向链表","aria-hidden":"true"}},[t._v("#")]),t._v(" 双向链表")]),t._v(" "),s("p",[t._v("双向链表除了有 data 和 next 指针外，还有指向前一个节点的 prev 指针。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.ax1x.com/2019/08/21/mN8efg.png",alt:"img"}})]),t._v(" "),s("h3",{attrs:{id:"链表的基本操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链表的基本操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 链表的基本操作")]),t._v(" "),s("p",[t._v("1、查找节点")]),t._v(" "),s("p",[t._v("查找第三个节点，需要从头节点开始，查找第二个节点，再查找第三个节点。时间复杂度最长为 O(n)。")]),t._v(" "),s("p",[t._v("2、更新节点")]),t._v(" "),s("p",[t._v("不考虑查找节点的过程，链表的更新过程和数组一样简单，直接替换成新数据即可。")]),t._v(" "),s("p",[t._v("3、插入节点")]),t._v(" "),s("ul",[s("li",[t._v("尾部插入")]),t._v(" "),s("li",[t._v("头部插入")]),t._v(" "),s("li",[t._v("中间插入")])]),t._v(" "),s("p",[t._v("尾部插入：将最后一个节点的 next 指针指向新插入的节点即可。")]),t._v(" "),s("p",[t._v("头部插入：将新节点的 next 指针指向原来的头节点，把新节点变为链表的头节点。")]),t._v(" "),s("p",[t._v("中间插入：新节点的 next 指针指向插入位置的节点，插入位置的前一个节点的 next 指针指向新节点。")]),t._v(" "),s("p",[t._v("4、删除元素")]),t._v(" "),s("ul",[s("li",[t._v("头部删除")]),t._v(" "),s("li",[t._v("中间删除")]),t._v(" "),s("li",[t._v("尾部删除")])]),t._v(" "),s("p",[t._v("尾部删除：将倒数第二个节点的 next 指向空。")]),t._v(" "),s("p",[t._v("头部删除：把原来的头节点的next指针指向的节点设为头节点。")]),t._v(" "),s("p",[t._v("中间删除：把删除位置的前一个节点的next指向删除位置的下一个节点。")]),t._v(" "),s("h2",{attrs:{id:"数组-vs-链表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组-vs-链表","aria-hidden":"true"}},[t._v("#")]),t._v(" 数组 vs 链表")]),t._v(" "),s("p",[t._v("数组优势在于能够快速定位元素，对于读操作多，写操作少的场景，数组更适合。")]),t._v(" "),s("p",[t._v("链表相反。")]),t._v(" "),s("h2",{attrs:{id:"栈和队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈和队列","aria-hidden":"true"}},[t._v("#")]),t._v(" 栈和队列")]),t._v(" "),s("h3",{attrs:{id:"物理结构和逻辑结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#物理结构和逻辑结构","aria-hidden":"true"}},[t._v("#")]),t._v(" 物理结构和逻辑结构")]),t._v(" "),s("p",[t._v("物理结构：内存中实实在在的存储结构。")]),t._v(" "),s("p",[t._v("包括顺序存储结构（数组）、链式存储结构（链表）。")]),t._v(" "),s("p",[t._v("逻辑结构：抽象概念，依赖物理结构存在。")]),t._v(" "),s("p",[t._v("包括线性（顺序表、栈、队列）、非线性（树、图）。")]),t._v(" "),s("h3",{attrs:{id:"栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈","aria-hidden":"true"}},[t._v("#")]),t._v(" 栈")]),t._v(" "),s("p",[t._v("特点：先进后出，后进先出。")]),t._v(" "),s("p",[t._v("最先进的元素位于栈底，最后进的元素位于栈顶。")]),t._v(" "),s("p",[t._v("基本操作：")]),t._v(" "),s("ul",[s("li",[t._v("入栈：将新元素放入栈中，不过只能从栈顶放入，新元素的位置成为栈顶。")]),t._v(" "),s("li",[t._v("出栈：将元素弹出栈，只能从栈顶弹出，弹出元素的前一个元素的位置成为栈顶。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.ax1x.com/2019/08/22/mdSrXd.png",alt:"img"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.ax1x.com/2019/08/22/mdpabn.png",alt:"img"}})]),t._v(" "),s("p",[t._v("因为出栈入栈都只影响到最后一个元素，时间复杂度：O(1)。")]),t._v(" "),s("h3",{attrs:{id:"队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#队列","aria-hidden":"true"}},[t._v("#")]),t._v(" 队列")]),t._v(" "),s("p",[t._v("特点：先进先出，后进后出。")]),t._v(" "),s("p",[t._v("队列的出口端叫队头，队列的入口端叫队尾。")]),t._v(" "),s("p",[t._v("基本操作：")]),t._v(" "),s("ul",[s("li",[t._v("入队")]),t._v(" "),s("li",[t._v("出队")])]),t._v(" "),s("p",[t._v("链表的入队、出队方式和栈基本相同，但是数组不一样。")]),t._v(" "),s("p",[t._v("用数组实现时，为了操作方便，把最后一个元素的下一个位置定位队尾。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.ax1x.com/2019/08/22/mdxTl4.png",alt:"img"}})]),t._v(" "),s("p",[t._v("数组的入队：只能从队尾加入，新元素的下一个位置变成队尾。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.ax1x.com/2019/08/22/mwSM8O.png",alt:"img"}})]),t._v(" "),s("p",[t._v("数组的出队：只能在队头一侧移除元素，出队元素的后一个元素成为新的队头。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.ax1x.com/2019/08/22/mw9sNq.png",alt:"img"}})]),t._v(" "),s("p",[t._v("如果不断出队，队列的容量会变得越来越小，需要采用循环队列的方式来维持队列的容量。")]),t._v(" "),s("p",[t._v("循环队列保留了出队元素的位置，新元素进来时，将队尾指向数组的首位，再进来新元素时，队尾往后一位移动，以此类推，直到 队尾下标+1 % 数组长度 === 0。")]),t._v(" "),s("p",[t._v("循环队列利用了数组的空间，避免了元素的移动。")]),t._v(" "),s("p",[t._v("入队出队的时间复杂度：O(1)")]),t._v(" "),s("h3",{attrs:{id:"双端队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双端队列","aria-hidden":"true"}},[t._v("#")]),t._v(" 双端队列")]),t._v(" "),s("p",[t._v("既可以先进先出，也可以先进后出。")]),t._v(" "),s("h3",{attrs:{id:"优先队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优先队列","aria-hidden":"true"}},[t._v("#")]),t._v(" 优先队列")]),t._v(" "),s("p",[t._v("优先级高的先出队。")]),t._v(" "),s("p",[t._v("不属于线性数据结构，基于二叉堆实现的。")]),t._v(" "),s("h2",{attrs:{id:"散列表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#散列表","aria-hidden":"true"}},[t._v("#")]),t._v(" 散列表")]),t._v(" "),s("p",[t._v("也叫哈希表（hash table）。")]),t._v(" "),s("p",[t._v("提供 key: value 的映射，只要给出一个 key 就能高效找到所匹配的 value。时间复杂度：O(1)")]),t._v(" "),s("h2",{attrs:{id:"哈希函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 哈希函数")]),t._v(" "),s("p",[t._v("散列表本质上也是一个数组。")]),t._v(" "),s("p",[t._v("通过某种方式，把 key 和数组下标进行转换——哈希函数。")]),t._v(" "),s("h3",{attrs:{id:"散列表的读写操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#散列表的读写操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 散列表的读写操作")]),t._v(" "),s("p",[t._v("1、写操作")]),t._v(" "),s("p",[t._v("在散列表中插入新的键值对（key-value)。")]),t._v(" "),s("p",[t._v("1）通过哈希函数把 key 转换成数组的下标，比如 5"),s("br"),t._v("\n2) 如果数组下标 5 对应的位置没有元素，就把 value 写入到数组下标 5 的位置。")]),t._v(" "),s("p",[t._v("因为数组长度是有限的，插入的键值对越来越多，不同的 key 通过哈希函数获得的下标有可能是相同的。这种情况叫__哈希冲突__。")]),t._v(" "),s("p",[t._v("哈希冲突解决方法：")]),t._v(" "),s("ul",[s("li",[t._v("开放寻址法")]),t._v(" "),s("li",[t._v("链表法")])]),t._v(" "),s("p",[t._v("开放寻址法：当一个 key 通过哈希函数获得对应的数组下标已被占用时，可以寻找下一个空档的位置。")]),t._v(" "),s("p",[t._v("链表法：")]),t._v(" "),s("p",[t._v("HashMap 数组的每个元素不仅时一个键值对，还是一个链表的头节点。每个键值对的 next 指向下一个键值对。")]),t._v(" "),s("p",[t._v("当新来的键值对映射到与之冲突的数组位置时，只需要插入到对应的链表中。")]),t._v(" "),s("p",[t._v("2、读操作")]),t._v(" "),s("p",[t._v("通过给定的 key，在散列表中查找对应的 value。")]),t._v(" "),s("ol",[s("li",[t._v("通过哈希函数把 key 转换成数组的下标，比如 5")]),t._v(" "),s("li",[t._v("找到下标为 5 的数组元素，如果对应的 key 是对的，则返回 value，否则继续在链表中查找。")])]),t._v(" "),s("p",[t._v("3、扩容")]),t._v(" "),s("p",[t._v("散列表是基于数组的，所以也涉及扩容的问题。")]),t._v(" "),s("p",[t._v("当大量元素拥挤在相同数组下标下，形成很长的链表时，对后续插入和查找性能有很大影响时，需要扩容。")]),t._v(" "),s("p",[t._v("影响扩容的因素：")]),t._v(" "),s("ul",[s("li",[t._v("Capacity: HashMap 的当前长度")]),t._v(" "),s("li",[t._v("LoadFactor: HashMap 的负载因子，默认值为 0.75f")])]),t._v(" "),s("p",[t._v("衡量是否需要扩容：")]),t._v(" "),s("p",[t._v("HashMap.size >= Capacity * LoadFactor")]),t._v(" "),s("p",[t._v("扩容操作：")]),t._v(" "),s("p",[t._v("1）扩容，创建一个新的 Entry 空数组，长度是原数组的 2 倍。"),s("br"),t._v("\n2）重新 Hash，遍历原 Entry 数组，把所有的 Entry 数组重新 Hash 到新数组中。-- 数组长度改变，Hash 规则随之改变。")])])}],!1,null,null,null);a.default=r.exports}}]);
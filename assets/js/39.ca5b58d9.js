(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{742:function(t,a,_){"use strict";_.r(a);var v=_(1),r=Object(v.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("div",{staticClass:"content"},[_("h1",{attrs:{id:"漫画算法-算法概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#漫画算法-算法概述","aria-hidden":"true"}},[t._v("#")]),t._v(" 漫画算法-算法概述")]),t._v(" "),_("h2",{attrs:{id:"时间复杂度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度","aria-hidden":"true"}},[t._v("#")]),t._v(" 时间复杂度")]),t._v(" "),_("p",[t._v("1、10cm的面包，3分钟吃掉1cm，需要多少时间？")]),t._v(" "),_("p",[t._v("t = 3 * 10;")]),t._v(" "),_("p",[t._v("如果长度是 n，T(n) = 3n;")]),t._v(" "),_("p",[t._v("2、面包长度16cm，每5分钟吃掉面包长度的一半，把面包吃得只剩1cm，需要多少时间？")]),t._v(" "),_("p",[t._v("用数学表达就是用 16 不断除以 2，除多少次结果为1.")]),t._v(" "),_("p",[t._v("用对数表示 t = log"),_("sub",[t._v("2")]),_("sup",[t._v("16")])]),t._v(" "),_("p",[t._v("如果长度是 n，T(n) = log"),_("sub",[t._v("2")]),_("sup",[t._v("n")]),t._v(";")]),t._v(" "),_("p",[t._v("3、有10cm的面包和1个鸡腿，吃掉一个鸡腿需要2分钟，吃掉整个鸡腿需要多久？")]),t._v(" "),_("p",[t._v("t = 2;")]),t._v(" "),_("p",[t._v("如果有 n 个鸡腿，T(n) = 2n;")]),t._v(" "),_("p",[t._v("4、长度为10cm的面包，吃掉第1个1cm需要1分钟，第二个1cm需要2分钟，以此类推，吃掉整个面包需要多久？")]),t._v(" "),_("p",[t._v("t = 1 + 2 + 3 + 4 + 5 + ... + 10 = (1 + 10) * 10 / 2；")]),t._v(" "),_("p",[t._v("如果长度为 n，T(n) = (1 + n ) * n / 2 = 0.5n + 0.5n"),_("sup",[t._v("2")]),t._v(";")]),t._v(" "),_("p",[_("strong",[t._v("渐进时间复杂度")])]),t._v(" "),_("p",[t._v("asymtotic time complexity")]),t._v(" "),_("p",[t._v("定义：当存在函数 f(n) ，使得当n趋近无穷大时，T(n) / f(n) 的极限值为不等于零的常数，则称 f(n) 是 T(n) 的同数量级函数，记作 T(n) = O(f(n)，O 为算法的渐进时间复杂度，简称时间复杂度。")]),t._v(" "),_("h2",{attrs:{id:"空间复杂度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度","aria-hidden":"true"}},[t._v("#")]),t._v(" 空间复杂度")]),t._v(" "),_("h3",{attrs:{id:"常量空间"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常量空间","aria-hidden":"true"}},[t._v("#")]),t._v(" 常量空间")]),t._v(" "),_("p",[t._v("算法的存储空间大小固定，和输入规模没有直接关系时，记作 O(1)。")]),t._v(" "),_("h3",{attrs:{id:"线性空间"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线性空间","aria-hidden":"true"}},[t._v("#")]),t._v(" 线性空间")]),t._v(" "),_("p",[t._v("算法空间是一个线性的集合（如数组），并且集合大小和输入规模 n 成正比，记作 O(n)。")]),t._v(" "),_("h3",{attrs:{id:"二维空间"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二维空间","aria-hidden":"true"}},[t._v("#")]),t._v(" 二维空间")]),t._v(" "),_("p",[t._v("算法分配的空间是一个二维数组集合，并且集合的长度和宽度都和输入规模 n 成正比，记作 O(n"),_("sup",[t._v("2")]),t._v(")")]),t._v(" "),_("h3",{attrs:{id:"递归空间"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#递归空间","aria-hidden":"true"}},[t._v("#")]),t._v(" 递归空间")]),t._v(" "),_("p",[t._v("计算机在执行程序时，会分配一块内存用来存储方法调用栈。")]),t._v(" "),_("p",[t._v("方法调用时会入栈，调用完后会出栈，直到全部方法调用完成出栈后，结束。")]),t._v(" "),_("p",[t._v("执行递归操作所需的内存空间和深度成正比，所以记作 O(n)。")]),t._v(" "),_("h3",{attrs:{id:"时间与空间的取舍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#时间与空间的取舍","aria-hidden":"true"}},[t._v("#")]),t._v(" 时间与空间的取舍")]),t._v(" "),_("p",[t._v("在绝大多数时候，时间复杂度更为重要一些，宁可多分配一些内存空间，也要提升程序的执行速度。")])])}],!1,null,null,null);a.default=r.exports}}]);